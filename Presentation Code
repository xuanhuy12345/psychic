---
title: "Psychic"
author: "Huy Nguyen, Lydia Ye"
date: "2024-05-28"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
psychic <- read.csv("/Users/admin/Downloads/PsychicApp Sample1 Data - Sheet1.csv")
```

```{r}
library(ggplot2)
library(dplyr)
library(shiny)
library(shinythemes)
```

```{r}
# Define UI for random distribution app ----
ui <- fluidPage(
  theme = shinytheme("journal"),
  
  titlePanel("Psychic Models"),

  sidebarLayout(
    sidebarPanel(

      selectInput(inputId = "groupID",
                  label = "Group ID:", 
                  choices =  c("all", all_groups),
                  multiple = TRUE,
                  selectize = TRUE,
                  selected = "sample1"),
      
       uiOutput(outputId = "groupID"),
  
       selectInput(inputId = "cardNum",
                  label = "Card Number:",
                  choices = c("2", "5"),
                  multiple = FALSE,
                  selectize = TRUE),
      
      uiOutput(outputId = "groupID"),
      
      selectInput(inputId = "cardAttempts",
                  label = "Card Attempts:",
                  choices = c("10", "20", "50"),
                  multiple = FALSE,
                  selectize = TRUE,
                  selected = "Challenge"),
      
      uiOutput(outputId = "groupID"),
      
      selectInput(inputId = "numorprop",
                  label = "Number or Proportion:",
                  choices = c("Number", "Proportion"),
                  multiple = FALSE,
                  selectize = TRUE ),
      
      sliderInput(inputId = "extreme",
                  label = "As extreme as:",
                  min = 0,
                  max = 1,
                  value = 0),
      
      selectInput(inputId = "options",
                  label = "Options",
                  choices = c("Binomial Distribution", "Normal Distribution"),
                  multiple = FALSE,
                  selectize = TRUE),
      
      
      checkboxInput(inputId = "sumstats",
                    label = "Summary Statistics",
                    value = FALSE),

    # Main panel for displaying outputs ----
    mainPanel(

=

    )
  )
)
)
# Define server logic for random distribution app ----
server <- function(input, output) {

  # Reactive expression to generate the requested distribution ----
  # This is called whenever the inputs change. The output functions
  # defined below then use the value computed from this expression
  d <- reactive({
    dist <- switch(input$dist,
                   norm = rnorm,
                   unif = runif,
                   lnorm = rlnorm,
                   exp = rexp,
                   rnorm)

    dist(input$n)
  })

  # Generate a plot of the data ----
  # Also uses the inputs to build the plot label. Note that the
  # dependencies on the inputs and the data reactive expression are
  # both tracked, and all expressions are called in the sequence
  # implied by the dependency graph.
  output$plot <- renderPlot({
    dist <- input$dist
    n <- input$n

    hist(d(),
         main = paste("r", dist, "(", n, ")", sep = ""),
         col = "#75AADB", border = "white")
  })

  # Generate a summary of the data ----
  output$summary <- renderPrint({
    summary(d())
  })

  # Generate an HTML table view of the data ----
  output$table <- renderTable({
    d()
  })

}
```

```{r}
# Create Shiny app ----
shinyApp(ui, server)
```
