library(shiny)
library(ggplot2)
library(dplyr)
library(readr)


# Load game data and combine it with sample 1 data
sample1_data <- read.csv("PsychicSample1.csv")
data.all <- readr::read_csv("https://www.stat2games.sites.grinnell.edu/data/psychic/getdata.php") 
data.all <- rbind(sample1_data, data.all, show_col_types = FALSE)

# Get group IDs
data.all$PlayerID <- tolower(data.all$PlayerID)
data.all$GroupID <- tolower(data.all$GroupID)
all_groups <- sort(unique(data.all$GroupID))

data.all <- data.all %>% 
  mutate(successratio = Successes / NumTries) 

# Define UI for the app
ui <- fluidPage(
  titlePanel("Psychic Models"),
  sidebarLayout(
    sidebarPanel(
      selectInput("groupID", 
                  "Group ID:", 
                  choices = c("all", all_groups), 
                  multiple = TRUE,
                  selectize = TRUE,
                  selected = "all"),
      
      selectInput("cardNum", 
                  "Number of Cards:", 
                  choices = c(2,5), 
                  selected = 5, 
                  multiple = FALSE),
      
      selectInput("cardAttempts", 
                  "Attempts:", 
                  choices = c(10,20,50), 
                  selected = 10, 
                  multiple = FALSE),
      
      selectInput("numOrProp", 
                  "Number or Proportion:", 
                  choices = c("Number", "Proportion"), 
                  selected = "Number"),
      
      
      uiOutput("sliderUI"),
      
      checkboxGroupInput("options",
                         "Theoretical Distributions:",
                         choices = c("Sample Data", "Binomial Distribution"),
                         selected = "Sample Data"), 
      
      checkboxInput("sumstats", 
                    "Summary Statistics", 
                    value = FALSE),
      
      downloadButton('downloadData', label = "Psychic Data")
    ),
    
    mainPanel(
      plotOutput("Plot"),
      uiOutput("summarytext"),
      uiOutput("summaryStatsUI")
    )
  )
) # ui


# Define Server for the app
server <- function(input, output, session) {
  # Filter the data set based on the user's selection
  filtered_data <- reactive({
    if ("all" %in% input$groupID) {
      data.all %>%
        filter(
          NumTries == input$cardAttempts &
            NumCard == input$cardNum &
            Deck == "open" # make sure the data is for open deck (for page 1)
        ) # filter
    } else {
      data.all %>%
        filter(
          GroupID %in% input$groupID &
            NumTries == input$cardAttempts &
            NumCard == input$cardNum &
            Deck == "open" # make sure the data is for open deck (for page 1)
        ) # filter 
    }
  }) # filtered_data
  
  # Generate different slider UI for number or proportion inputs.
  output$sliderUI <- renderUI({
    if (input$numOrProp == "Number") {
      max_value <- as.numeric(input$cardAttempts)
      sliderInput("extreme", 
                  "As extreme as:", 
                  min = 0, 
                  max = max_value, 
                  value = max_value / 2, 
                  step = 1)
    } else {
      sliderInput("extreme", 
                  "As extreme as:", 
                  min = 0, 
                  max = 1, 
                  value = 0.5, 
                  step = 1 / as.numeric(input$cardAttempts))
    } # if/else
  }) # output$sliderUI 
  
  output$Plot <- renderPlot({
    # Get filtered data
    data_plot <- filtered_data()
    
    # Print error message if there's no data
    if (nrow(data_plot) == 0) {
      #Empty data frame to return  
      data_plot <- data.frame(Successes = numeric(0), NumTries = numeric(0))
      #Help Text
      output$summarytext <- renderUI(
        HTML(paste0("<div style='margin-left: 20px; color: grey;'>", 
                    em("There is no data with the selected characteristics."), 
                    "</div><br/>")))
    } else {
      #Removing dynamic help text
      output$summarytext <- renderUI({""})
    }
    
    # Get total number of data
    sample_size <- nrow(data_plot)
    # Get bin width for generating histograms
    bin_width <- as.numeric(input$cardAttempts) / 10
    
    # Get theoretical probability, mean and standard deviation based on the chosen card number
    prob <- ifelse(as.numeric(input$cardNum) == 5, 0.2, 0.5)
    mean <- as.numeric(input$cardAttempts) * prob
    sd <- sqrt(as.numeric(input$cardAttempts) * prob * (1 - prob))
    
    # Base plot
    p <- ggplot()
    
    
    # Add Sample Data histogram if selected
    if ("Sample Data" %in% input$options) {
      if (input$numOrProp == "Number") {
        p <- p +
          geom_histogram(
            data = data_plot,
            aes(x = Successes, fill = Successes >= input$extreme),
            binwidth = 1, color = "purple4", alpha = 0.5, show.legend = FALSE
          ) +
          geom_vline(xintercept = input$extreme - 0.5, color = "darkorchid4", linetype = "longdash", size = 1) +
          scale_fill_manual(values = c("maroon4", "lightpink")) +
          scale_x_continuous(
            breaks = seq(0, as.numeric(input$cardAttempts), by = as.numeric(input$cardAttempts) / 10),
            limits = c(max(-0.5, mean - 4 * sd), max(mean + 4 * sd, max(data_plot$Successes) + 1, input$extreme))
          )
      } else {
        p <- p +
          geom_histogram(
            data = data_plot,
            aes(x = Successes / NumTries, fill = Successes / NumTries >= input$extreme),
            binwidth = 1 / as.numeric(input$cardAttempts), color = "purple4", alpha = 0.5, show.legend = FALSE
          ) +
          geom_vline(xintercept = input$extreme - 1 / (2 * as.numeric(input$cardAttempts)), color = "darkblue", linetype = "longdash", size = 1) +
          scale_fill_manual(values = c("maroon4", "lightpink"))
      }
    }
    
    # Add Binomial Distribution histogram if selected
    if ("Binomial Distribution" %in% input$options) {
      total_counts <- ifelse(sample_size == 0, 1, sample_size)
      if (input$numOrProp == "Number") {
        binom_data <- data.frame(Successes = 0:as.numeric(input$cardAttempts))
        binom_data$Frequency <- dbinom(binom_data$Successes, size = as.numeric(input$cardAttempts), prob = prob) * total_counts
        p <- p +
          geom_histogram(
            data = binom_data,
            aes(x = Successes, y = Frequency),
            binwidth = bin_width, color = "purple4", fill = "greenyellow", alpha = 0.4,
            stat = "identity", position = "identity", show.legend = FALSE
          ) +
          scale_x_continuous(
            breaks = seq(0, as.numeric(input$cardAttempts), by = as.numeric(input$cardAttempts) / 10),
            limits = c(max(-0.5, mean - 4 * sd), max(mean + 4 * sd, max(data_plot$Successes) + 1, input$extreme))
          )
      } else {
        binom_data <- data.frame(Proportion = (0:as.numeric(input$cardAttempts)) / as.numeric(input$cardAttempts))
        binom_data$Frequency <- dbinom(0:as.numeric(input$cardAttempts), size = as.numeric(input$cardAttempts), prob = prob) * total_counts
        p <- p +
          geom_histogram(
            data = binom_data,
            aes(x = Proportion, y = Frequency),
            color = "purple4", fill = "greenyellow", alpha = 0.4,
            stat = "identity", position = "identity", show.legend = FALSE
          ) +
          xlim(
            max(-0.5, mean - 4 * sd) / as.numeric(input$cardAttempts),
            max(
              (mean + 4 * sd) / as.numeric(input$cardAttempts),
              (max(data_plot$Successes) + 1) / as.numeric(input$cardAttempts),
              input$extreme
            )
          )
      }
    }
    
    # Add labels and theme
    p <- p +
      labs(
        title = ifelse(input$numOrProp == "Number", 
                       "Histogram of Number of Successes", 
                       "Histogram of Proportion of Successes"),
        y = "Frequency",
        x = ifelse(input$numOrProp == "Number", "Number of Successes", "Proportion of Successes")
      ) +
      theme_bw() +
      theme(
        text = element_text(family = "Times", size = 20),
        plot.title = element_text(face = "bold")
      )
    
    
    # return final plot
    return(p)
  })
  
  output$summaryStatsUI <- renderUI({
    if (input$sumstats) {
      fluidRow(
        column(6, uiOutput("binomDistSummary")),
        column(6, tableOutput("summaryStatsTable"))
      )}
    else{fluidRow(
      uiOutput("binomDistSummary")
    )
    }
  })
  
  output$summaryStatsTable <- renderTable({
    if (input$sumstats) {
      data_stats <- filtered_data()
      cardAttempts <- as.numeric(input$cardAttempts)
      extreme <- as.numeric(input$extreme)
      cardNum <- as.numeric(input$cardNum)
      mean1 <- if (input$numOrProp == "Number") {cardAttempts * (1 / cardNum)} else {1 / cardNum}
      sd1 <- if (input$numOrProp == "Number") {sqrt(cardAttempts * (1 / cardNum) * (1 - 1 / cardNum))} else {sqrt((1 / cardAttempts) * (1 / cardNum) * (1 - 1 / cardNum))}
      stats1 <- if (input$numOrProp == "Number") {data_stats$Successes} else {data_stats$successratio}
      
      if ("Binomial Distribution" %in% input$options &  "Sample Data" %in% input$options) {
        data.frame(
          Statistics = c("Sample Size", "Mean", "SD", "Min", "Q1", "Median", "Q3", "Max"),
          Sample = c(nrow(data_stats), mean(stats1), sd(stats1), min(stats1), quantile(stats1, 0.25), median(stats1), quantile(stats1, 0.75), max(stats1)),
          Theoretical = c(nrow(data_stats), 
                          mean1,
                          sd1,
                          0, 
                          qnorm(0.25, mean1, sd1), 
                          qnorm(0.5, mean1, sd1), 
                          qnorm(0.75, mean1, sd1), 
                          if (input$numOrProp == "Number") {cardAttempts} else {1})
        )
      } else if ("Sample Data" %in% input$options){
        data.frame(
          Statistics = c("Sample Size", "Mean", "SD", "Min", "Q1", "Median", "Q3", "Max"),
          Sample = c(nrow(data_stats), mean(stats1), sd(stats1), min(stats1), quantile(stats1, 0.25), median(stats1), quantile(stats1, 0.75), max(stats1))
        )
      } else if ("Binomial Distribution" %in% input$options){
        data.frame(
          Statistics = c("Sample Size", "Mean", "SD", "Min", "Q1", "Median", "Q3", "Max"),
          Theoretical = c(nrow(data_stats), 
                          mean1,
                          sd1,
                          0, 
                          qnorm(0.25, mean1, sd1), 
                          qnorm(0.5, mean1, sd1), 
                          qnorm(0.75, mean1, sd1), 
                          if (input$numOrProp == "Number") {cardAttempts} else {1})
        )
      }
    }
  })
  
  output$binomDistSummary <- renderUI({
    # Ensure all inputs are numeric
    cardAttempts <- as.numeric(input$cardAttempts)
    extreme <- as.numeric(input$extreme)
    cardNum <- as.numeric(input$cardNum)
    
    # Filtered data for calculation
    data_stats <- filtered_data()
    
    # Sample proportion
    sample <- if (input$numOrProp == "Number") {
      sum(data_stats$Successes >= extreme) / nrow(data_stats)
    } else {
      sum(data_stats$successratio >= extreme) / nrow(data_stats)
    }
    
    # Binomial distribution proportion
    binom <- if (input$numOrProp == "Number") {
      pbinom(extreme-1, size = cardAttempts, prob = 1 / cardNum, lower.tail = FALSE)
    } else {
      pbinom(extreme * cardAttempts-1, size = cardAttempts, prob = 1 / cardNum, lower.tail = FALSE)
    }
    
    # Generate dynamic text
    HTML(paste0(
      "<p style='font-size:16px;'>",
      "The proportion of the samples greater than <b style='color: purple;'>", extreme, "</b> is <b>", 
      format(sample, digits = 3, nsmall = 3), 
      "</b>.<br>",
      "The proportion of theoretical observations greater than <b style='color: purple;'>", extreme, "</b> is <b>", 
      format(binom, digits = 3, nsmall = 3), 
      "</b>.</p>",
      "<p style='font-size:14px; color: #8a79ff;'>"
    ))
  })
  
  output$downloadData <- downloadHandler(
    filename = function() {
      paste('Data-', Sys.Date(), '.csv', sep="")
    },
    content = function(con) {
      write.csv(filtered_data(), con)
    })
}  

shinyApp(ui=ui,server=server)
